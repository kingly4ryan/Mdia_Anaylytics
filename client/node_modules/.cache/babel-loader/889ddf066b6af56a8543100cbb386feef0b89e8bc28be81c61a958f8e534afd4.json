{"ast":null,"code":"import axios from 'axios';\nexport const fetchSegmentationResults = async () => {\n  try {\n    const response = await axios.get('/instagram-segmentation'); // Adjust URL to your Flask API endpoint\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching segmentation results:', error);\n    return []; // Return empty data or handle error as needed\n  }\n};\nexport const fetchPerformanceResults = async () => {\n  try {\n    const response = await axios.get('api/data/twitter_performance_predictions.json'); // Adjust URL to your Flask API endpoint\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching performance results:', error);\n    return {\n      actual: [],\n      predicted: []\n    }; // Return empty data or handle error as needed\n  }\n};\nexport const fetchChurnResults = async () => {\n  try {\n    const response = await axios.get('/spotify-predictions'); // Adjust URL to your Flask API endpoint\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching churn results:', error);\n    return {\n      actual: [],\n      predicted: []\n    }; // Return empty data or handle error as needed\n  }\n};","map":{"version":3,"names":["axios","fetchSegmentationResults","response","get","data","error","console","fetchPerformanceResults","actual","predicted","fetchChurnResults"],"sources":["C:/Users/ASUS/Desktop/project/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nexport const fetchSegmentationResults = async () => {\r\n    try {\r\n      const response = await axios.get('/instagram-segmentation'); // Adjust URL to your Flask API endpoint\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching segmentation results:', error);\r\n      return []; // Return empty data or handle error as needed\r\n    }\r\n  };\r\n  export const fetchPerformanceResults = async () => {\r\n    try {\r\n      const response = await axios.get('api/data/twitter_performance_predictions.json'); // Adjust URL to your Flask API endpoint\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching performance results:', error);\r\n      return { actual: [], predicted: [] }; // Return empty data or handle error as needed\r\n    }\r\n  };\r\n\r\nexport const fetchChurnResults = async () => {\r\n  try {\r\n    const response = await axios.get('/spotify-predictions'); // Adjust URL to your Flask API endpoint\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching churn results:', error);\r\n    return { actual: [], predicted: [] }; // Return empty data or handle error as needed\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAA,KAAY;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC;IAC7D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;AACD,OAAO,MAAME,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EACjD,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,+CAA+C,CAAC,CAAC,CAAC;IACnF,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,OAAO;MAAEG,MAAM,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAG,CAAC,CAAC,CAAC;EACxC;AACF,CAAC;AAEH,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAAC;IAC1D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MAAEG,MAAM,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAG,CAAC,CAAC,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}