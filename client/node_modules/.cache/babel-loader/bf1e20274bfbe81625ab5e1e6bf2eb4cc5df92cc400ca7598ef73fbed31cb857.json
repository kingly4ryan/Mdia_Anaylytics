{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\project\\\\client\\\\src\\\\components\\\\Segmentation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchSegmentationResults } from '../utils/api';\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\nconst Segmentation = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [showChart, setShowChart] = useState(false);\n  useEffect(() => {\n    fetchSegmentationResults().then(setData);\n  }, []);\n\n  // Prepare the data for the pie chart\n  const segmentsCount = data.reduce((acc, item) => {\n    acc[item.segment] = (acc[item.segment] || 0) + 1;\n    return acc;\n  }, {});\n  const chartData = Object.keys(segmentsCount).map(key => ({\n    name: `Segment ${key}`,\n    value: segmentsCount[key]\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Instagram User Segmentation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowChart(!showChart),\n      children: showChart ? 'Hide Chart' : 'Show Chart'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), showChart && /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData,\n          cx: \"50%\",\n          cy: \"50%\",\n          outerRadius: 150,\n          fill: \"#8884d8\",\n          dataKey: \"value\",\n          children: chartData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Segmentation, \"iuEUiasFhQsFltR0xGHi12ZOVVI=\");\n_c = Segmentation;\nexport default Segmentation;\nvar _c;\n$RefreshReg$(_c, \"Segmentation\");","map":{"version":3,"names":["React","useEffect","useState","fetchSegmentationResults","PieChart","Pie","Cell","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","COLORS","Segmentation","_s","data","setData","showChart","setShowChart","then","segmentsCount","reduce","acc","item","segment","chartData","Object","keys","map","key","name","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","cx","cy","outerRadius","fill","dataKey","entry","index","length","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/project/client/src/components/Segmentation.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { fetchSegmentationResults } from '../utils/api';\r\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\nconst Segmentation = () => {\r\n  const [data, setData] = useState([]);\r\n  const [showChart, setShowChart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchSegmentationResults().then(setData);\r\n  }, []);\r\n\r\n  // Prepare the data for the pie chart\r\n  const segmentsCount = data.reduce((acc, item) => {\r\n    acc[item.segment] = (acc[item.segment] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const chartData = Object.keys(segmentsCount).map(key => ({\r\n    name: `Segment ${key}`,\r\n    value: segmentsCount[key],\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h2>Instagram User Segmentation</h2>\r\n      <button onClick={() => setShowChart(!showChart)}>\r\n        {showChart ? 'Hide Chart' : 'Show Chart'}\r\n      </button>\r\n      {showChart && (\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <PieChart>\r\n            <Pie\r\n              data={chartData}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={150}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n            >\r\n              {chartData.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip />\r\n            <Legend />\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Segmentation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}