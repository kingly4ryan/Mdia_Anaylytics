{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\project\\\\client\\\\src\\\\components\\\\Performance.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchPerformanceResults } from '../utils/api';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Performance = () => {\n  _s();\n  const [data, setData] = useState({\n    actual: [],\n    predicted: []\n  });\n  const [showChart, setShowChart] = useState(false);\n  useEffect(() => {\n    fetchPerformanceResults().then(setData);\n  }, []);\n  const chartData = data.actual.map((value, index) => ({\n    name: `User ${index + 1}`,\n    Actual: value,\n    Predicted: data.predicted[index]\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Twitter Performance Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowChart(!showChart),\n      children: showChart ? 'Hide Chart' : 'Show Chart'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), showChart && /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Actual\",\n          stroke: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"Predicted\",\n          stroke: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#ccc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(Performance, \"TFaWgl5hZTHLQRKCfvJlIMk033E=\");\n_c = Performance;\nexport default Performance;\nvar _c;\n$RefreshReg$(_c, \"Performance\");","map":{"version":3,"names":["React","useEffect","useState","fetchPerformanceResults","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","Performance","_s","data","setData","actual","predicted","showChart","setShowChart","then","chartData","map","value","index","name","Actual","Predicted","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","margin","top","right","left","bottom","type","dataKey","stroke","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/project/client/src/components/Performance.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { fetchPerformanceResults } from '../utils/api';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst Performance = () => {\r\n  const [data, setData] = useState({ actual: [], predicted: [] });\r\n  const [showChart, setShowChart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchPerformanceResults().then(setData);\r\n  }, []);\r\n\r\n  const chartData = data.actual.map((value, index) => ({\r\n    name: `User ${index + 1}`,\r\n    Actual: value,\r\n    Predicted: data.predicted[index],\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h2>Twitter Performance Prediction</h2>\r\n      <button onClick={() => setShowChart(!showChart)}>\r\n        {showChart ? 'Hide Chart' : 'Show Chart'}\r\n      </button>\r\n      {showChart && (\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n          <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n            <Line type=\"monotone\" dataKey=\"Actual\" stroke=\"#8884d8\" />\r\n            <Line type=\"monotone\" dataKey=\"Predicted\" stroke=\"#82ca9d\" />\r\n            <CartesianGrid stroke=\"#ccc\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Performance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}